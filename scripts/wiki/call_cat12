#!/bin/bash
#$ -S /bin/bash
#$ -cwd
#$ -j Y
#$ -q short.q@jupiter
#$ -V

#---------------------------------------------------------------------------------------------------------
# Create help text
function Usage {
		cat <<USAGE

---------------------------------------------------------------------------------------------------
call_cat12

Wrapper for brain extraction CAT12. You should have the toolbox installed in <path>. This script
uses a tempate script to run CAT12 in SPM.

Args:
 -s <SPM_PATH>  path to SPM; should contain CAT12 in toolbox directory
 -l <LOG_PATH>	path to working directory, defaults to DIR_LOGS
 <input image>  input image. Can either be *.nii.gz or *.nii image. In the case of the former,
                new *.nii-file will be created alongside of the *.nii.gz file, as SPM does
                not like *.nii.gz files.
 <output path>	path to output directory; in here, 'mri' and 'report' will be stored

Usage:
 call_cat12 -l <log_dir> -s <SPM_PATH> <input file> <output directory>
 call_cat12 <input file> <output directory>

Example:
 call_cat12 /path/to/inputfile.nii.gz /path/to/output_dir
 call_cat12 -l /path/to/logs -s /packages/matlab/toolbox/spm12 input.nii.gz /path/to/output

---------------------------------------------------------------------------------------------------

USAGE
		exit 1
}

if [[ $# -lt 2 ]] ; then
	Usage >&2
	exit 1
fi

# Check for subject & session flags
while getopts l:s: argument
do
  case ${argument} in
    l)  LOG=${OPTARG}
            ;;
    s)  SPM=${OPTARG}
            ;;
  esac
done

INPUT=${@:$OPTIND:1}
OUTPUT=${@:$OPTIND+1:1}

#-----------------------------------------------------------------------------
# Define default LOG-path
if [[ -z ${LOG} ]]; then
	if [[ -z ${DIR_LOGS} ]]; then
		LOG_DIR=${PWD}
	else
		LOG_DIR=${DIR_LOGS}
	fi
else
	LOG_DIR=${LOG}
fi

if [[ ! -d ${LOG_DIR} ]]; then
	mkdir -p ${LOG_DIR}
fi

#-----------------------------------------------------------------------------
# Define default SPM-path
if [[ -z ${SPM} ]]; then
	if [[ -z ${SPM_PATH} ]]; then
		echo "ERROR: SPM_PATH-variable is empty. Either define it, or specify an SPM-path with \"-s <path/to/spm>\""
		exit 1
	else
		SPM_PATH=${SPM_PATH}
	fi
else
	SPM_PATH=${SPM}
fi

#-----------------------------------------------------------------------------
# Define function to create SPM-compatible script with
function make_script {

	# Check if we have compatible version; we're using 12.6!!
	VER=`cat ${SPM_PATH}/toolbox/cat12/Contents.txt | grep -A0 -m 1 "CAT" | cut -d'(' -f2 | cut -d')' -f1 2>/dev/null`
	if [[ ${VER} != "CAT12" ]] && [[ ${VER} != "CAT12.6" ]]; then
		echo "CAT12 VERSION = ${VER}: I only have support for CAT12 (r1113) or CAT12.6 (r1450)"
		exit 1
	fi

	cat12_dir=`find ${SPM_PATH} -type d -name "*cat12*" -print -quit 2>/dev/null`
	if [[ -z ${cat12_dir} ]]; then
		echo "Could not find CAT12-directory in \"${SPM_PATH}\""
		exit 1
	fi

	tpm_dir=`find $(dirname ${SPM_PATH}) -type d -name "*tpm*" -print -quit 2>/dev/null`
	if [[ -z ${tpm_dir} ]]; then
		echo "Could not find template-directory in \"${SPM_PATH})\""
		exit 1
	fi

	if [[ ${PLACE} == "SPINOZA" ]]; then
		CPUs=0
	else
		CPUs=0
	fi

	if [[ ${VER} == "CAT12" ]]; then
		(
		echo "%-----------------------------------------------------------------------------"
		echo "% Created on `date`. Running with ${VER}"
		echo ""
		echo "clear;"
		echo "addpath(genpath('${SPM_PATH}'));"
		echo ""
		echo "matlabbatch{1}.spm.tools.cat.estwrite.data = {'${1},1'};"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.nproc = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.opts.tpm = {'${SPM_PATH}/tpm/TPM.nii'};"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.opts.ngaus = [1 1 2 3 4 2];"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.opts.biasreg = 0.001;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.opts.biasfwhm = 60;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.opts.warpreg = [0 0.001 0.5 0.05 0.2];"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.opts.affreg = 'mni';"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.opts.samp = 3;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.APP = 2;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.sanlm = 2;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.NCstr = -Inf;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.LASstr = 0.5;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.gcutstr = 0.5;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.cleanupstr = 0.5;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.regstr = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.WMHCstr = 0.5;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.WMHC = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.darteltpm = {'${SPM_PATH}/toolbox/cat12/templates_1.50mm/Template_1_IXI555_MNI152.nii'};"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.restypes.native = struct([]);"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.vox = 1.5;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.pbtres = 0.5;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.scale_cortex = 0.7;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.add_parahipp = 0.1;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.ignoreErrors = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.ROI = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.atlases.neuromorphometrics = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.atlases.lpba40 = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.atlases.cobra = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.atlases.hammers = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.surface = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.GM.native = 1;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.GM.warped = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.GM.mod = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.GM.dartel = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.WM.native = 1;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.WM.warped = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.WM.mod = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.WM.dartel = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.CSF.native = 1;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.CSF.warped = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.CSF.mod = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.CSF.dartel = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.WMH.native = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.WMH.warped = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.WMH.mod = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.WMH.dartel = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.label.native = 1;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.label.warped = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.label.dartel = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.bias.native = 1;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.bias.warped = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.bias.dartel = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.las.native = 1;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.las.warped = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.las.dartel = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.jacobian.warped = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.warps = [0 0];"
		echo ""
		echo "cat_get_defaults('extopts.expertgui',1);"
		echo "spm_jobman('initcfg');"
		echo "spm('defaults','fMRI')"
		echo "spm_jobman('run', matlabbatch);"
		echo "exit"
		) >> ${2}
	
	elif [[ ${VER} == "CAT12.6" ]]; then
		(
		echo "%-----------------------------------------------------------------------------"
		echo "% Created on `date`. Running with ${VER}"
		echo ""
		echo "clear;"
		echo "addpath(genpath('${SPM_PATH}'));"
		echo ""
		echo "matlabbatch{1}.spm.tools.cat.estwrite.data = {'${1},1'};"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.nproc = ${CPUs};"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.opts.tpm = {'${SPM_PATH}/tpm/TPM.nii'};"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.opts.affreg = 'mni';"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.opts.biasstr = 0.75;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.opts.accstr = 0.5;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.segmentation.APP = 1070;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.segmentation.NCstr = -Inf;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.segmentation.LASstr = 0.5;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.segmentation.gcutstr = 2;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.segmentation.cleanupstr = 0.5;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.segmentation.WMHC = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.segmentation.SLC = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.segmentation.restypes.native = struct([]);"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.registration.dartel.darteltpm = {'${SPM_PATH}/toolbox/cat12/templates_1.50mm/Template_1_IXI555_MNI152.nii'};"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.vox = 1.5;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.surface.pbtres = 0.5;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.surface.scale_cortex = 0.7;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.surface.add_parahipp = 0.1;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.surface.close_parahipp = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.admin.ignoreErrors = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.admin.verb = 2;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.extopts.admin.print = 2;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.surface = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.ROImenu.noROI = struct([]);"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.GM.native = 1;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.GM.warped = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.GM.mod = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.GM.dartel = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.WM.native = 1;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.WM.warped = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.WM.mod = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.WM.dartel = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.CSF.native = 1;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.CSF.warped = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.CSF.mod = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.CSF.dartel = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.WMH.native = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.WMH.warped = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.WMH.mod = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.WMH.dartel = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.SL.native = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.SL.warped = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.SL.mod = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.SL.dartel = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.atlas.native = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.atlas.dartel = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.label.native = 1;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.label.warped = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.label.dartel = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.bias.native = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.bias.warped = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.bias.dartel = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.las.native = 1;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.las.warped = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.las.dartel = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.jacobianwarped = 0;"
		echo "matlabbatch{1}.spm.tools.cat.estwrite.output.warps = [0 0];"
		echo ""
		echo "cat_get_defaults('extopts.expertgui',1);"
		echo "spm_jobman('initcfg');"
		echo "spm('defaults','fMRI')"
		echo "spm_jobman('run', matlabbatch);"
		echo "exit"
		) >> ${2}
	else
		echo "CAT12 VERSION = ${VER}: I only have support for CAT12 (r1113) or CAT12.6 (r1450)"
		exit 1
	fi

	# also save the matlabbatch-only lines to a file that we can load in SPM/CAT12
	if [[ -f $(dirname ${2})/$(basename ${2} .m)_batch.m ]]; then
		rm $(dirname ${2})/$(basename ${2} .m)_batch.m
	fi

	cat ${2} | grep -A0 "matlabbatch{" >> $(dirname ${2})/$(basename ${2} .m)_batch.m

}

#-----------------------------------------------------------------------------
# Get extension from input file
function fetch_extension {
	fname=$(basename -- "${1}")
	ext="${fname##*.}"
	filename="${fname%.*}"
	echo $ext
}

ext=`fetch_extension ${INPUT}`
if [[ ${ext} == "gz" ]]; then
	in_file=$(dirname ${INPUT})/$(basename ${INPUT} .gz)
	gunzip -c ${INPUT} > ${in_file}
else
	in_file=${INPUT}
fi

#-----------------------------------------------------------------------------
# Create new script
new_script=${LOG_DIR}/cat12.m
if [[ -f ${new_script} ]]; then
	rm -r ${new_script}
fi

if [[ ! -d ${OUTPUT} ]]; then
	mkdir -p ${OUTPUT}
fi

# Only run stuff if we can't find 'mri'-directory in the directory from the input
# file or in the specified output-directory. Mind you, it therefore does NOT over-
# write stuff from CAT12..
if [[ -d ${OUTPUT}/mri ]]; then
	if [[ `ls ${OUTPUT}/mri | wc -l` -eq 0 ]]; then
		RUN="yes"
	else
		RUN=""
	fi
else
	if [[ -d $(dirname ${in_file})/mri ]]; then
		if [[ `ls $(dirname ${in_file})/mri | wc -l` -eq 0 ]]; then
			RUN="yes"
		else
			RUN=""
		fi
	else
		RUN="yes"
	fi
fi

if [[ ${RUN} == "yes" ]]; then
	make_script ${in_file} ${new_script}

	if [[ ${PLACE} == "SPINOZA" ]]; then
		skip_lines=65
	else
		skip_lines=0
	fi
	echo "Starting CAT12.."
	cd $(dirname ${new_script})
	matlab -nodesktop -nosplash -nodisplay -r "$(basename ${new_script} .m)" | tail -n +${skip_lines} # suppress intro text

	if [[ $? -ne 0 ]]; then
		echo "ERROR: matlab exited with non-zero status"
		exit 1
	fi

	cd ${OLDPWD}

	# check for error-directory
	if [[ -d $(dirname ${in_file})/err ]]; then
		echo "ERROR in `basename ${0}`: CAT12 encountered an error"
		rm -r $(dirname ${in_file})/err # info is in the report-file; delete this directory
		continue
	fi
	
else
	echo "Found CAT12-output"
fi

# Move 'mri'/'report'-directory to specified output directory
if [[ -d $(dirname ${in_file})/mri ]]; then
	echo "Move directories to ${OUTPUT}"
	mv $(dirname ${in_file})/mri ${OUTPUT}
fi

if [[ -d $(dirname ${in_file})/report ]]; then
	mv $(dirname ${in_file})/report ${OUTPUT}
fi

# Convert SPM's .nii-files to .nii.gz if the input file was nii.gz
if [[ ${ext} == "gz" ]]; then
	echo "Convert files back to nii.gz"
	gzip ${OUTPUT}/mri/*.nii 2>/dev/null
	rm -r ${in_file}
fi

# make sure header matches input image
if [[ -d ${OUTPUT}/mri ]]; then
	echo "Copying header from input image"
	for i in ${OUTPUT}/mri/*; do
		fslcpgeom ${INPUT} ${i}
	done
fi

# create binary mask from p0-segmentation (= brain extracted image)
bet_img=`find ${OUTPUT}/mri -type f -name "p0*" 2>/dev/null`
if [ ! -z ${bet_img} ]; then
	echo "Create mask from brain extracted segmentation image \"p0\""
	fslmaths ${bet_img} -bin ${OUTPUT}/mri/mask$(basename ${bet_img})
	# fslorient -copyqform2sform ${OUTPUT}/mri/mask$(basename ${bet_img})
fi

cp ${OUTPUT}/mri/*.nii.gz ${OUTPUT} 2>/dev/null
cp ${OUTPUT}/report/catreport* ${OUTPUT} 2>/dev/null 

rm -r ${OUTPUT}/mri ${OUTPUT}/report 2>/dev/null

echo "Done"
